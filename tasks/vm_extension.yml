---

- block:
    - name: Create VM Extension
      azure_rm_virtualmachineextension:
        name: "ve_{{ azure_prefix }}_{{ idx }}"
        resource_group: "{{ azure_resource_group_name }}"
        virtual_machine_name: "{{ item.ansible_facts.azure_vm.name }}"
        publisher: Microsoft.Compute
        virtual_machine_extension_type: CustomScriptExtension
        type_handler_version: '1.9'
        settings: '{"commandToExecute": "powershell.exe -ExecutionPolicy ByPass -EncodedCommand {{ winrm_enable_script }}"}'
        auto_upgrade_minor_version: true
      async: 7200
      poll: 0
      register: vm_extension
      loop: "{{ instances.results }}"
      loop_control:
        index_var: idx
      when:
        - instances.results is defined
        - nodes is defined
        - item.item.item.os_type | default('Linux') == 'Windows'

    - name: Wait for vm extensions
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: extensions
      until: extensions.finished
      retries: "{{ instance_wait_retry_limit }}"
      delay: 10
      loop: "{{ vm_extension.results | default([]) }}"
      when: item.ansible_job_id is defined

  rescue:
    - name: Delete VM Extension
      azure_rm_virtualmachineextension:
        name: "ve_{{ azure_prefix }}_{{ idx }}"
        resource_group: "{{ azure_resource_group_name }}"
        virtual_machine_name: "{{ item.ansible_facts.azure_vm.name }}"
        state: absent
      loop: "{{ extensions.results }}"
      loop_control:
        index_var: idx
      ignore_errors: yes
      when:
        - nodes is defined
        - extensions.results is defined
        - item.failed

    - name: Create VM Extension
      azure_rm_virtualmachineextension:
        name: "ve_{{ azure_prefix }}_{{ idx }}"
        resource_group: "{{ azure_resource_group_name }}"
        virtual_machine_name: "{{ item.ansible_facts.azure_vm.name }}"
        publisher: Microsoft.Compute
        virtual_machine_extension_type: CustomScriptExtension
        type_handler_version: '1.9'
        #settings: '{"fileUris": ["https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1"],"commandToExecute": "powershell.exe -ExecutionPolicy Unrestricted -File ConfigureRemotingForAnsible.ps1 -ForceNewSSLCert -EnableCredSSP"}'
        settings: '{"commandToExecute": "powershell.exe -ExecutionPolicy ByPass -EncodedCommand {{ winrm_enable_script }}"}'
        auto_upgrade_minor_version: true
      async: 7200
      poll: 0
      register: vm_extension_failed
      loop: "{{ extensions.results }}"
      loop_control:
        index_var: idx
      when:
        - nodes is defined
        - extensions.results is defined
        - item.failed

    - name: Wait for vm extensions (retry)
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: extensions_retry
      until: extensions_retry.finished
      retries: "{{ instance_wait_retry_limit }}"
      delay: 10
      loop: "{{ vm_extension_failed.results | default([]) }}"
      when: item.ansible_job_id is defined